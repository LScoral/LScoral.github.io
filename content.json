{"meta":{"title":"Leave Me Alone","subtitle":"Heroes Never Die","description":"想做厨子和摄影师的程序员","author":"L.Scoral","url":"http://sssmarter.cn"},"pages":[{"title":"Categories","date":"2017-06-12T14:01:00.847Z","updated":"2017-06-12T14:01:00.847Z","comments":false,"path":"categories/index.html","permalink":"http://sssmarter.cn/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-06-13T13:00:33.446Z","updated":"2017-06-13T06:24:38.000Z","comments":false,"path":"about/index.html","permalink":"http://sssmarter.cn/about/index.html","excerpt":"","text":"Here is something interesting or boring in my life. If you like the blog, you can add bookmark on your browser. L.Scoral Beijing, Capital of China Programmer who wants to be a chef and photographer. Email: lscoral.bupt@gmail.com / lscoral.bupt@outlook.com You can find me in these places: Github,ZhiHu,JianShu,Weibo These may requests VPN：Twitter,Instagram If you like Ingress,MinerCraft, contact with me. I will try my best to update this blog. To be continued…"},{"title":"Tags","date":"2017-06-12T14:00:56.391Z","updated":"2017-06-12T14:00:56.391Z","comments":false,"path":"tags/index.html","permalink":"http://sssmarter.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git-learning","slug":"Git-learning","date":"2017-06-12T11:22:20.000Z","updated":"2017-06-12T14:59:34.520Z","comments":true,"path":"2017/06/12/Git-learning/","link":"","permalink":"http://sssmarter.cn/2017/06/12/Git-learning/","excerpt":"Git基础操作：本地+远程操作Step1: 初始化用户名和邮箱123安装完成之后，初始化用户名和用户邮箱：$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot;","text":"Git基础操作：本地+远程操作Step1: 初始化用户名和邮箱123安装完成之后，初始化用户名和用户邮箱：$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; Step2: 初始化git仓库12初始化一个Git仓库，使用git init命令。git init Step3: git部分操作12345678910111213141516171819202122添加文件到Git仓库，分两步：- 第一步，使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；- 第二步，使用命令git commit，完成。修改文件，用git diff filename 来查看被修改的文件的情况然后用同样的代码，先git add file,再git commit -m &quot;comment&quot; 提交分支git log 查看版本更迭的历史记录简化输出信息：git log --pretty=onelineHEAD表示当前版本，HEAD^表示上一版本，HEAD^^表示上上一个版本，HEAD~100表示上100个版本回退使用git reset 命令git reset --hard +HEAD或者commit id可以使用git diff HEAD -- filename 来查看工作区和版本库里面最新版本的区别git checkout --file 丢弃工作区的修改git reset HEAD file 撤销暂存区的修改在工作区中删除了文件，1.同步到版本库中，用git rm file，然后再git commit -m &quot;&quot;来同步到版本库；2.需要恢复的话，则用git checkout -- file 来将版本库中的同步到工作区； Step4: 远程仓库123456789101112远程仓库：查看用户主目录下是否有.ssh目录，有的话，直接复制id_ras.pub的内容去github中添加ssh key如果没有，则用 ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 创建ssh keygit添加远程管仓库：1.现在github上添加一个仓库，然后复制ssh地址；2.把本地库和github上的库关联：git remote add origin(远程仓库的名字) (ssh地址)下一步是把本地库所有的内容推送到远程库上：git push -u origin master把本地库的内容推送到远程，用git push命令，实际上是把当前分支mast推送到远程；由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。之后只需要使用git push origin master即可将本地master分支的最新修改版本推送到github Git创建并切换新的分支1234567创建并切换新的分支：git checkout -b dev上述相当于：git branch dev（创建分支） + git checkout dev（切换分支）查看当前分支：git branch切换回原分支：git checkout master合并指定分支到当前分支：git merge dev删除分支：git branch -d dev Git解决冲突123解决冲突：两条及以上分支同时做了修改首先修改文件的内容用于解决冲突，然后再重新提交原数据文件用git log --graph 可查看分支合并图 后续继续……未完待尽……","categories":[{"name":"Git","slug":"Git","permalink":"http://sssmarter.cn/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://sssmarter.cn/tags/git/"}]},{"title":"Python3-sendmail","slug":"Python3-sendmail","date":"2017-06-12T03:09:01.000Z","updated":"2017-06-12T14:58:45.978Z","comments":true,"path":"2017/06/12/Python3-sendmail/","link":"","permalink":"http://sssmarter.cn/2017/06/12/Python3-sendmail/","excerpt":"本文是使用Python3发送邮件的介绍，如要使用Python2，请进入Python2-sendmail SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。","text":"本文是使用Python3发送邮件的介绍，如要使用Python2，请进入Python2-sendmail SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。 python的smtplib提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。 Python创建 SMTP 对象语法如下： 12import smtplibsmtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] ) 参数说明： host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如:w3cschool.cc，这个是可选参数。 port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下SMTP端口号为25。 local_hostname: 如果SMTP在你的本机上，你只需要指定服务器地址为 localhost 即可。 Python SMTP对象使用sendmail方法发送邮件，语法如下： 1SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options] 参数说明： from_addr: 邮件发送者地址。 to_addrs: 字符串列表，邮件发送地址。 msg: 发送消息 这里要注意一下第三个参数，msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。 实例1：利用第三方SMTP访问发送邮件123456789101112131415161718192021222324252627import smtplibfrom email.mime.text import MIMETextfrom email.header import Headermail_host = 'smtp.exmail.qq.com'mail_user = '***'mail_pass = '***'sender = '***'receivers = '***'message = MIMEText('Pythontest','plain','utf-8')message['From'] = Header('test1','utf-8')message['To'] = Header('test','utf-8')subject = 'python smtp test'message['Subject'] = Header(subject,'utf-8')try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host,25) smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(sender,receivers,message.as_string()) print('success')except smtplib.SMTPException: print('failed') 实例2：使用Python发送HTML格式的邮件Python发送HTML格式的邮件与发送纯文本消息的邮件不同之处就是将MIMEText中_subtype设置为html。具体代码如下： 12345678910111213141516171819202122232425262728293031import smtplibfrom email.mime.text import MIMETextfrom email.header import Headermail_host = 'smtp.exmail.qq.com'mail_user = 'zhijie.liao@dmall.com'mail_pass = 'Smarter1025@#'sender = 'zhijie.liao@dmall.com'receivers = 'zhijie.liao@dmall.com'mail_msg = '''&lt;p&gt;Python邮件发送测试&lt;/p&gt;&lt;p&gt;&lt;a href=\"sssmarter.cn\"&gt;我的博客&lt;/a&gt;&lt;/p&gt;'''message = MIMEText(mail_msg,'html','utf-8')message['From'] = Header('test1','utf-8')message['To'] = Header('test','utf-8')subject = 'python smtp test'message['Subject'] = Header(subject,'utf-8')try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host,25) smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(sender,receivers,message.as_string()) print('success')except smtplib.SMTPException: print('failed') 实例3：Python 发送带附件的邮件12345678910111213141516171819202122232425262728293031323334353637import smtplibfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.header import Header sender = 'from@runoob.com'receivers = ['429240967@qq.com'] # 接收邮件，可设置为你的QQ邮箱或者其他邮箱 #创建一个带附件的实例message = MIMEMultipart()message['From'] = Header(\"test1\", 'utf-8')message['To'] = Header(\"test2\", 'utf-8')subject = 'Python SMTP 邮件测试'message['Subject'] = Header(subject, 'utf-8') #邮件正文内容message.attach(MIMEText('这是菜鸟教程Python 邮件发送测试……', 'plain', 'utf-8')) # 构造附件1，传送当前目录下的 test.txt 文件att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8')att1[\"Content-Type\"] = 'application/octet-stream'# 这里的filename可以任意写，写什么名字，邮件中显示什么名字att1[\"Content-Disposition\"] = 'attachment; filename=\"test.txt\"'message.attach(att1) # 构造附件2，传送当前目录下的 runoob.txt 文件att2 = MIMEText(open('runoob.txt', 'rb').read(), 'base64', 'utf-8')att2[\"Content-Type\"] = 'application/octet-stream'att2[\"Content-Disposition\"] = 'attachment; filename=\"runoob.txt\"'message.attach(att2) try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, message.as_string()) print (\"邮件发送成功\")except smtplib.SMTPException: print (\"Error: 无法发送邮件\") 实例4：使用QQ邮箱的SMTP服务发送邮件12345678910111213141516171819202122232425262728import smtplibfrom email.mime.text import MIMETextfrom email.utils import formataddr my_sender='zhijie.liao@dmall.com' # 发件人邮箱账号my_pass = '***' # 发件人邮箱密码my_user='zhijie.liao@dmall.com' # 收件人邮箱账号，我这边发送给自己def mail(): ret=True try: msg=MIMEText('填写邮件内容','plain','utf-8') msg['From']=formataddr([\"FromRunoob\",my_sender]) # 括号里的对应发件人邮箱昵称、发件人邮箱账号 msg['To']=formataddr([\"FK\",my_user]) # 括号里的对应收件人邮箱昵称、收件人邮箱账号 msg['Subject']=\"菜鸟教程发送邮件测试\" # 邮件的主题，也可以说是标题 server=smtplib.SMTP(\"smtp.exmail.qq.com\", 25) # 发件人邮箱中的SMTP服务器，端口是25 server.login(my_sender, my_pass) # 括号中对应的是发件人邮箱账号、邮箱密码 server.sendmail(my_sender,my_user,msg.as_string()) # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件 server.quit() # 关闭连接 except Exception: # 如果 try 中的语句没有执行，则会执行下面的 ret=False ret=False return ret ret=mail()if ret: print(\"邮件发送成功\")else: print(\"邮件发送失败\") 好了！到这里本文就结束了！这里就是我的底线！","categories":[{"name":"Python","slug":"Python","permalink":"http://sssmarter.cn/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://sssmarter.cn/tags/python/"},{"name":"mail","slug":"mail","permalink":"http://sssmarter.cn/tags/mail/"}]},{"title":"《算命》-徐童","slug":"《算命》-徐童","date":"2017-06-11T15:42:01.000Z","updated":"2017-06-12T14:59:08.290Z","comments":true,"path":"2017/06/11/《算命》-徐童/","link":"","permalink":"http://sssmarter.cn/2017/06/11/《算命》-徐童/","excerpt":"赶这个双休日，把之前下载下来保存很久的徐童的纪录片《算命》看完了。","text":"赶这个双休日，把之前下载下来保存很久的徐童的纪录片《算命》看完了。 整个视频在不到3个小时的时间里，分成八个章节，每个章节一个阶段性的故事。整个纪录片以算命为线索，讲述每一个来历百程这里算命的人的故事，同时也穿插了一些其他的事情。从一开始在红灯区开店的老板娘的故事，到最后说到历百程自己被迫无奈回家住宿，之后又重新外出找活计的事情。纪录片很俗，是真的很俗，俗到了土里，却也俗得让人难受。 有一个很深的印象，本以为历百程照料石珍珠真的是可怜她，但是在最后他自己也道出了真相。当初就是想女人，图一时痛快，就为了弄一下，现在成了一个包袱，但你说现在再给她赶走？那也不忍心啊… 没有静下心来细细地去想视频的每一个细节，所以也就作罢了，不想去挖空脑袋想措辞，完成这一篇推送~感觉自己还是涉世太浅，未经世间百事，岂能凭心而谈。 看完之后去知乎看了评价，感觉想照搬过来放上，但又怕侵犯了别人的知识产权，所以贴上链接，留个记录吧~[https://www.zhihu.com/question/21290531?sort=created]","categories":[{"name":"Movies","slug":"Movies","permalink":"http://sssmarter.cn/categories/Movies/"}],"tags":[{"name":"documentary","slug":"documentary","permalink":"http://sssmarter.cn/tags/documentary/"},{"name":"impressive","slug":"impressive","permalink":"http://sssmarter.cn/tags/impressive/"}]},{"title":"Python2-sendmail","slug":"Python2-sendmail","date":"2017-06-11T06:58:34.000Z","updated":"2017-06-12T13:55:43.623Z","comments":true,"path":"2017/06/11/Python2-sendmail/","link":"","permalink":"http://sssmarter.cn/2017/06/11/Python2-sendmail/","excerpt":"本代码适用于Python2环境，Python3环境请参考其他 补充：Python3发送邮件请查看Python3-sendmail 以下是相关代码：","text":"本代码适用于Python2环境，Python3环境请参考其他 补充：Python3发送邮件请查看Python3-sendmail 以下是相关代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#!/usr/bin/env python# -*- coding: UTF-8 -*-from email.mime.multipart import MIMEMultipartfrom email.mime.base import MIMEBasefrom email.mime.text import MIMETextfrom email.mime.image import MIMEImagefrom email.utils import COMMASPACE,formatdatefrom email import encodersimport osimport sysimport getoptreload(sys)sys.setdefaultencoding('utf8')#server['name'], server['user'], server['passwd']def send_mail(server, fro, to, subject, content,content_type='html', files=[],pics=&#123;&#125;): assert type(server) == dict assert type(to) == list assert type(files) == list assert type(pics) == dict msg = MIMEMultipart() msg['From'] = fro if not isinstance(subject,unicode): subject = unicode(subject) msg['Subject'] = subject msg['To'] = COMMASPACE.join(to) msg['Date'] = formatdate(localtime=True) msg.attach(MIMEText(content,content_type,'utf-8')) for file in files: part = MIMEBase('application', 'octet-stream') part.set_payload(open(file, 'rb').read()) encoders.encode_base64(part) part.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % os.path.basename(file)) msg.attach(part) for k,v in pics.items(): fp = open(k, 'rb') msgImage = MIMEImage(fp.read()) fp.close() msgImage.add_header('Content-ID', v) msg.attach(msgImage) import smtplib smtp = smtplib.SMTP(server['name']) smtp.login(server['user'], server['passwd']) smtp.sendmail(fro, to, msg.as_string()) smtp.close()def send(to, subject, content,content_type='html', files=[],pics=&#123;&#125;): server = &#123;&#125; server['name'] ='smtp.exmail.qq.com' server['user'] = 'email address' server['passwd'] = 'passwd' send_mail(server,'email address',to, subject, content,content_type,files,pics)def useage(): print '--title 邮件标题,不可少选项' print '--to 收件人列表，逗号分隔多个账户' print '--content 邮件内容' print '--attachs 附件列表，逗号分隔多个附件' print '--type 取值:html,plain两种，默认html' print '''--pics 正文中图片，字典格式：&#123;\"图片路径\",\"图片标识（eg:&lt;imgage1&gt;正文中使用&lt;img src='cid:imgage1' &gt;来引用，标识两侧尖括号不能少）\"&#125;'''def main(argv): try: opts,args = getopt.getopt(argv[1:],'',['to=','title=','content=','attachs=','type=','pics=']) except getopt.GetoptError, err: print str(err) print useage() sys.exit(2) title = '' tolist = [] content = '' attachs = [] type = 'html' pics = &#123;&#125; for k,v in opts: if k == '--title': title = v if k == '--to': tolist = v.split(\",\") elif k == '--content': content = v elif k == '--attachs': attachs = v.split(\",\") elif k == '--type': type = v elif k == '--pics': pics = eval(v) if title == '': print 'please input title...' sys.exit(1) if type not in ('html','plain'): print 'content type only supports:html,plain...' sys.exit(1) if tolist == []: print 'please input mail receiver...' sys.exit(1) send(tolist, title, content,type, attachs,pics)if __name__ == '__main__': main(sys.argv)","categories":[{"name":"Python","slug":"Python","permalink":"http://sssmarter.cn/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://sssmarter.cn/tags/python/"},{"name":"mail","slug":"mail","permalink":"http://sssmarter.cn/tags/mail/"}]},{"title":"Python-format Usage","slug":"Python-format","date":"2017-06-09T01:17:18.000Z","updated":"2017-06-12T14:58:20.615Z","comments":true,"path":"2017/06/09/Python-format/","link":"","permalink":"http://sssmarter.cn/2017/06/09/Python-format/","excerpt":"foramt函数：“映射”示例通过位置123456In [1]: '&#123;0&#125;,&#123;1&#125;'.format('kzc',18)Out[1]: 'kzc,18' In [2]: '&#123;&#125;,&#123;&#125;'.format('kzc',18) Out[2]: 'kzc,18' In [3]: '&#123;1&#125;,&#123;0&#125;,&#123;1&#125;'.format('kzc',18) Out[3]: '18,kzc,18'","text":"foramt函数：“映射”示例通过位置123456In [1]: '&#123;0&#125;,&#123;1&#125;'.format('kzc',18)Out[1]: 'kzc,18' In [2]: '&#123;&#125;,&#123;&#125;'.format('kzc',18) Out[2]: 'kzc,18' In [3]: '&#123;1&#125;,&#123;0&#125;,&#123;1&#125;'.format('kzc',18) Out[3]: '18,kzc,18' 字符串的format函数可以接受不限个参数，位置可以不按顺序，可以不用或者用多次，不过2.6不能为空{}，2.7才可以。 通过关键字参数1In [5]: '&#123;name&#125;,&#123;age&#125;'.format(age=18,name='kzc') Out[5]: 'kzc,18' 通过对象属性12class Person: def init(self,name,age): self.name,self.age = name,age def str(self): return 'This guy is &#123;self.name&#125;,is &#123;self.age&#125; old'.format(self=self)In [2]: str(Person('kzc',18)) Out[2]: 'This guy is kzc,is 18 old' 通过下标12In [7]: p=['kzc',18] In [8]: '&#123;0[0]&#125;,&#123;0[1]&#125;'.format(p) Out[8]: 'kzc,18' 有了这些便捷的“映射”方式，我们就有了偷懒利器。基本的python知识告诉我们，list和tuple可以通过“打散”成普通参数给函数，而dict可以打散成关键字参数给函数（通过和*）。所以可以轻松的传个list/tuple/dict给format函数。非常灵活。 格式限定符它有着丰富的的“格式限定符”（语法是{}中带:号），比如：填充与对齐填充常跟对齐一起使用^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度:号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充，比如 123456In [15]: '&#123;:&gt;8&#125;'.format('189') Out[15]: ' 189' In [16]: '&#123;:0&gt;8&#125;'.format('189') Out[16]: '00000189' In [17]: '&#123;:a&gt;8&#125;'.format('189') Out[17]: 'aaaaa189' 精度与类型f精度常跟类型f一起使用 12In [44]: '&#123;:.2f&#125;'.format(321.33345) Out[44]: '321.33' 其中.2表示长度为2的精度，f表示float类型。 其他类型主要就是进制了，b、d、o、x分别是二进制、十进制、八进制、十六进制。 12345678In [54]: '&#123;:b&#125;'.format(17) Out[54]: '10001' In [55]: '&#123;:d&#125;'.format(17) Out[55]: '17' In [56]: '&#123;:o&#125;'.format(17)Out[56]: '21' In [57]: '&#123;:x&#125;'.format(17) Out[57]: '11' 用，号还能用来做金额的千位分隔符。 12In [47]: '&#123;:,&#125;'.format(1234567890)Out[47]: '1,234,567,890'","categories":[{"name":"Python","slug":"Python","permalink":"http://sssmarter.cn/categories/Python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://sssmarter.cn/tags/python/"},{"name":"format","slug":"format","permalink":"http://sssmarter.cn/tags/format/"}]}]}